@page "/main_menu"

<PageTitle>Menú Principal</PageTitle>

@using Domino_Server.Data
@inject Params Params

<body>
    <EditForm Model="@Params" OnValidSubmit="OnValidSubmit">
        <div class="form-terms">
            <label for="total-players">Total de Jugadores:</label>
            <select class="form-select" aria-label="default" @onchange="@_Gamemode">
                <option value="0" selected>Define una modalidad</option>
                @for (int i = 0; i < Params.Game_Modes.Length; i++)
                {
                    <option value="@i">@Params.Game_Modes[i]</option>
                }
            </select>
        </div>
        
        <div class="form-terms">
            <label for="total-players">Total de Jugadores:</label>
            <select class="form-select" aria-label="default" @onchange="@_NumbOP">
                <option value="0" selected>Define una cantidad de jugadores</option>
                @for (int i = 0; i < Params.NumberOfPlayers.Length; i++)
                {
                    <option value="@i">@Params.NumberOfPlayers[i]</option>
                }
            </select>
        </div>

        <div class="form-terms">
            @for (int i = 0; i < numbOP; i++)
            {
                <label for="number-of-players">Player_@(i+1)</label>
                <select class="form-select" aria-label="default" @onchange="@_PlayersT">
                    <option value="0" selected>Selecciona el tipo de jugador</option>
                    @for (int j = 0; j < Params.PlayersT.Length; j++)
                    {
                        <option value="@j">@Params.PlayersT[j]</option>
                    }
                </select>
            }
        </div>
        
        <div class="form-terms">
            <label for="couples">Equipos:</label>
            <select class="form-select" aria-label="default" @onchange="@_Teams">
                <option value="0" selected>Define los equipos</option>
                @for (int i = 0; i < Params.Teams.Length; i++)
                {
                    <option value="@i">@Params.Teams[i]</option>
                }
            </select>
        </div>

        <div class="form-terms">
            <label for="shuffle">Repartición:</label>
            <select class="form-select" aria-label="default" @onchange="@_Repart">
                <option value="0" selected>Define la forma de repartir las fichas</option>
                @for (int i = 0; i < Params.Repart.Length; i++)
                {
                    <option value="@i">@Params.Repart[i]</option>
                }
            </select>
        </div>

        <div class="form-terms">
            <label for="victory-params">Puntuación:</label>
            <select class="form-select" aria-label="default" @onchange="@_PuntRules">
                <option value="0" selected>Define las reglas de puntuación</option>
                @for (int i = 0; i < Params.VictoryParams.Length; i++)
                {
                    <option value="@i">@Params.VictoryParams[i]</option>
                }
            </select>
        </div>
    </EditForm>

    <button class="starter" onclick="location.href='/GameOn'">Jugar</button>
</body>


@code{
    private int numbOP;
    protected void OnValidSubmit(){
        System.Console.WriteLine("ok");
    }
    public void _Gamemode(ChangeEventArgs gm){
        var auxiliar = gm.Value;
        if (auxiliar.ToString() == "0"){
            Params.Mode = 10;
            Params._Numbers = new List<int>{ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
        }
        else if (auxiliar.ToString() == "1"){
            Params.Mode = 7;
            Params._Numbers = new List<int>{ 0, 1, 2, 3, 4, 5, 6 };
        }
    }
    public void _NumbOP(ChangeEventArgs numb){
        var auxiliar = numb.Value;
        if (auxiliar.ToString() == "0") Params._NumbOP = 2;
        else if (auxiliar.ToString() == "1") Params._NumbOP = 4;
        
        numbOP = Params._NumbOP;
    }
    public void _PlayersT(ChangeEventArgs type){
        var auxiliar = type.Value;
        if (auxiliar.ToString() == "0") Params._PlayerType.Add(new Botagorda<int>());
        else if (auxiliar.ToString() == "1") Params._PlayerType.Add(new Pro_Player<int>());
        else if (auxiliar.ToString() == "2") Params._PlayerType.Add(new Random_Player<int>());
    }
    public void _Teams(ChangeEventArgs tm){
        var auxiliar = tm.Value;
        if (auxiliar.ToString() == "0") Params._Teams = new No_Couples<int>();
        else if (auxiliar.ToString() == "1") Params._Teams = new Two_in_Two_Couples<int>();
    }
    public void _Repart(ChangeEventArgs rp){
        var auxiliar = rp.Value;
        if (auxiliar.ToString() == "0") Params._Repart = new Repartir_Usual<int>();
        else if (auxiliar.ToString() == "1") Params._Repart = new Repartir_Fibonacci<int>();
    }
    public void _PuntRules(ChangeEventArgs punt){
        var auxiliar = punt.Value;
        if (auxiliar.ToString() == "0") Params._VictoryP = "3";
        else if (auxiliar.ToString() == "1") Params._VictoryP = "5";
        else if (auxiliar.ToString() == "2") Params._VictoryP = "8";
        else if (auxiliar.ToString() == "7") Params._VictoryP = $"{int.MaxValue}";
    }
}